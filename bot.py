import os
import logging
import json
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_STATE, SELECT_LEVEL, FEEDBACK = range(3)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TOKEN')
if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Railway")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
if ':' not in TOKEN:
    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: {TOKEN[:5]}...")
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123456789:ABCdefGHIJK...'")

logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω (–ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤): {TOKEN[:5]}...")

# –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
ADVICES = {
    "–ê–ø–∞—Ç–∏—è": {
        "1": {
            "description": "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ü–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ –ª–µ–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.",
            "advices": ["–ü—Ä–æ–≥—É–ª–∫–∞", "–ú—É–∑—ã–∫–∞", "–í–æ–¥–∞"],
            "risk": "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        },
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∞–ø–∞—Ç–∏–∏
    },
    "–ú–∞–Ω–∏—è": {
        "1": {
            "description": "–õ–µ–≥–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã.",
            "advices": ["–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞", "–ó–∞–ø–∏—Å—å –∏–¥–µ–π", "–†–∞–∑–º–∏–Ω–∫–∞"],
            "risk": "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        },
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –º–∞–Ω–∏–∏
    }
}

# –§–∞–π–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = "/data/stats.json"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º /data –¥–ª—è Railway

def ensure_data_dir():
    """–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç"""
    os.makedirs(os.path.dirname(STATS_FILE), exist_ok=True)

def load_stats():
    ensure_data_dir()
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

def save_stats(stats):
    try:
        ensure_data_dir()
        with open(STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: main_kb, level_kb, feedback_kb)

async def start(update: Update, context: CallbackContext):
    try:
        await update.message.reply_text(
            "üìä –í—ã–±–µ—Ä–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
            reply_markup=main_kb()
        )
        return SELECT_STATE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        raise

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: handle_state, handle_level, handle_feedback)

def main():
    try:
        application = Application.builder().token(TOKEN).build()
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                SELECT_STATE: [
                    MessageHandler(filters.TEXT & filters.Regex("^(–ê–ø–∞—Ç–∏—è|–ú–∞–Ω–∏—è)$"), handle_state),
                    MessageHandler(filters.TEXT & filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats)
                ],
                SELECT_LEVEL: [MessageHandler(filters.TEXT & filters.Regex("^[1-5]$"), handle_level)],
                FEEDBACK: [CallbackQueryHandler(handle_feedback)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        application.add_handler(conv_handler)
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()
