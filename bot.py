import os
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_STATE, SELECT_LEVEL, FEEDBACK = range(3)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô!)
TOKEN = os.getenv("TOKEN") or "7587845741:AAE54-7FfJTcECoPwfVg-rEHttFrkK9IkSM"

# –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏)
ADVICES = {
    "–ê–ø–∞—Ç–∏—è": {
        "1": {
            "description": "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ü–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ –ª–µ–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.",
            "advices": [
                "–ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞",
                "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –±–æ–¥—Ä–æ–π –º—É–∑—ã–∫–∏",
                "–õ–µ–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞"
            ],
            "risk": "–†–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª–µ–Ω. –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–∏–∑–∫–æ –∫ –±–∞–ª–∞–Ω—Å—É."
        },
        "2": {
            "description": "–í—ã–ø–µ–π –≤–æ–¥—ã. –ü–æ—Å–ª—É—à–∞–π –º—É–∑—ã–∫—É. –í–∫–ª—é—á–∏ —Å–º–µ—à–Ω–æ–µ –≤–∏–¥–µ–æ. –ï—Å—Ç—å —Ä–∏—Å–∫ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –≥–ª—É–±–∂–µ –≤ –º—ã—Å–ª–∏.",
            "advices": [
                "–í—ã–ø–µ–π –≤–æ–¥—ã",
                "–ü–æ—Å–ª—É—à–∞–π –º—É–∑—ã–∫—É",
                "–í–∫–ª—é—á–∏ —Å–º–µ—à–Ω–æ–µ –≤–∏–¥–µ–æ",
                "–ü–æ–∑–≤–æ–Ω–∏ –¥—Ä—É–≥—É (–¥–∞–∂–µ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã)"
            ],
            "risk": "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Ç–µ—Ä—è —ç–Ω–µ—Ä–≥–∏–∏. –í–∞–∂–Ω–æ –º—è–≥–∫–æ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ."
        },
        "3": {
            "description": "–í—ã–ø–µ–π –∫–æ—Ñ–µ –∏–ª–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫. –ü—Ä–∏–º–∏ –≥–æ—Ä—è—á–∏–π –¥—É—à. –°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ —Ä—É–∫–∞–º–∏ (—É–±–æ—Ä–∫–∞).",
            "advices": [
                "–í—ã–ø–µ–π –∫–æ—Ñ–µ –∏–ª–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫",
                "–ü—Ä–∏–º–∏ –≥–æ—Ä—è—á–∏–π –¥—É—à",
                "–°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ —Ä—É–∫–∞–º–∏ (—É–±–æ—Ä–∫–∞, —Ä–∏—Å–æ–≤–∞–Ω–∏–µ)",
                "–ù–∞–ø–∏—à–∏ –ø–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–∞ –±—É–º–∞–≥—É"
            ],
            "risk": "–°—Ä–µ–¥–Ω—è—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –¢–µ–ª–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è–º."
        },
        "4": {
            "description": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å –∫–µ–º-—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. –í—ã–π–¥–∏ –Ω–∞ —É–ª–∏—Ü—É –∏ —É–π–¥–∏ –¥–∞–ª–µ–∫–æ –æ—Ç –¥–æ–º–∞.",
            "advices": [
                "–ü–æ–≥–æ–≤–æ—Ä–∏ —Å –∫–µ–º-—Ç–æ (–æ —á—ë–º —É–≥–æ–¥–Ω–æ)",
                "–í—ã–π–¥–∏ –Ω–∞ —É–ª–∏—Ü—É –∏ —É–π–¥–∏ –¥–∞–ª–µ–∫–æ –æ—Ç –¥–æ–º–∞",
                "–ö—Ä–∏–∫ –≤ –ø–æ–¥—É—à–∫—É",
                "–ü—Ä–∏–º–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à"
            ],
            "risk": "–í—ã—Å–æ–∫–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –í–æ–∑–º–æ–∂–Ω—ã —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏."
        },
        "5": {
            "description": "–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤—ã–ø–ª–∞–∫–∞—Ç—å—Å—è –∏ –≤—ã–ø–ª–µ—Å–Ω—É—Ç—å —ç–º–æ—Ü–∏–∏. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ, –Ω–æ –≤ —ç—Ç–æ–º –∏ –≤—ã—Ö–æ–¥.",
            "advices": [
                "–í—ã–ø–ª–∞—á—å—Å—è (–≤–∫–ª—é—á–∏ –≥—Ä—É—Å—Ç–Ω—É—é –º—É–∑—ã–∫—É/—Ñ–∏–ª—å–º)",
                "–í—ã–ø–ª–µ—Å–Ω–∏ –∑–ª–æ—Å—Ç—å (–±–µ–π –ø–æ–¥—É—à–∫—É, —Ä–≤–∏ –±—É–º–∞–≥—É)",
                "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É",
                "–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã ‚Äî –ø—Ä–∏–º–∏ (–ø–æ —Ä–µ—Ü–µ–ø—Ç—É)"
            ],
            "risk": "–ö—Ä–∏–∑–∏—Å. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω—è—è –ø–æ–º–æ—â—å."
        }
    },
    "–ú–∞–Ω–∏—è": {
        "1": {
            "description": "–õ–µ–≥–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã.",
            "advices": [
                "–ù–∞–ø—Ä–∞–≤—å —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ 1 –≤–∞–∂–Ω–æ–µ –¥–µ–ª–æ",
                "–ó–∞–ø–∏—à–∏ –∏–¥–µ–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å",
                "–°–¥–µ–ª–∞–π –±—ã—Å—Ç—Ä—É—é —Ä–∞–∑–º–∏–Ω–∫—É"
            ],
            "risk": "–†–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª–µ–Ω. –≠–Ω–µ—Ä–≥–∏—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."
        },
        "2": {
            "description": "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ –æ–¥–Ω–æ–º –¥–µ–ª–µ, –∏–∑–±–µ–≥–∞–π –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏.",
            "advices": [
                "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –æ–¥–Ω–æ–º –¥–µ–ª–µ",
                "–ò–∑–±–µ–≥–∞–π –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏",
                "–ü–µ–π –≤–æ–¥—É –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –≥–ª–æ—Ç–∫–∞–º–∏"
            ],
            "risk": "–õ—ë–≥–∫–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –í–æ–∑–º–æ–∂–Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å."
        },
        "3": {
            "description": "–í—ã–ø–µ–π –≤–æ–¥—ã. –ü–æ–µ—à—å –≤–∫—É—Å–Ω—è—à–µ–∫. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–ª—è–≥ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π.",
            "advices": [
                "–í—ã–ø–µ–π –≤–æ–¥—ã",
                "–ü–æ–µ—à—å –≤–∫—É—Å–Ω—è—à–µ–∫",
                "–ü—Ä–∏–ª—è–≥ –Ω–∞ 10 –º–∏–Ω—É—Ç",
                "–í–∫–ª—é—á–∏ –±–µ–ª—ã–π —à—É–º"
            ],
            "risk": "–°—Ä–µ–¥–Ω—è—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –ú–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è —Ç—Ä–µ–º–æ—Ä."
        },
        "4": {
            "description": "–í—Ä–µ–º—è –ª–µ—á—å –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, —Å–æ–≤—Å–µ–º. –í–∫–ª—é—á–∏ —Ç—É–ø–æ–π –≤–∏–¥–æ—Å.",
            "advices": [
                "–õ—è–≥ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π",
                "–í–∫–ª—é—á–∏ ¬´—Ç—É–ø–æ–π¬ª –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫",
                "–î—ã—Ö–∞–Ω–∏–µ 4-7-8 (–≤–¥–æ—Ö-–∑–∞–¥–µ—Ä–∂–∫–∞-–≤—ã–¥–æ—Ö)",
                "–•–æ–ª–æ–¥–Ω—ã–µ –ª–∞–¥–æ–Ω–∏ –Ω–∞ –ª–∏—Ü–æ"
            ],
            "risk": "–í—ã—Å–æ–∫–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –†–∏—Å–∫ –∏—Ä—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
        },
        "5": {
            "description": "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å.",
            "advices": [
                "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å",
                "–ü—Ä–∏–º–∏ —É—Å–ø–æ–∫–æ–∏—Ç–µ–ª—å–Ω–æ–µ (–µ—Å–ª–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ)",
                "–í—ã–∑–æ–≤–∏ –¥—Ä—É–≥–∞/—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞",
                "–ì–æ—Ä—è—á–µ–µ —Å–ª–∞–¥–∫–æ–µ –ø–∏—Ç—å—ë"
            ],
            "risk": "–ö—Ä–∏–∑–∏—Å. –í–æ–∑–º–æ–∂–Ω—ã –∏—Å—Ç–µ—Ä–∏–∫–∞, –∞–≥—Ä–µ—Å—Å–∏—è –∏–ª–∏ —Å—Ç—É–ø–æ—Ä."
        }
    }
}

# –§–∞–π–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = "stats.json"

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except:
        return {}

def save_stats(stats):
    try:
        with open(STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
        return True
    except:
        return False

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_kb():
    return ReplyKeyboardMarkup([
        ["–ê–ø–∞—Ç–∏—è", "–ú–∞–Ω–∏—è"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
    ], resize_keyboard=True)

def level_kb():
    return ReplyKeyboardMarkup([[str(i) for i in range(1, 6)]], resize_keyboard=True)

def feedback_kb(advices):
    buttons = [[InlineKeyboardButton(a, callback_data=f"help_{i}")] for i, a in enumerate(advices)]
    buttons.append([InlineKeyboardButton("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ", callback_data="help_none")])
    return InlineKeyboardMarkup(buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
        reply_markup=main_kb()
    )
    return SELECT_STATE

async def show_stats(update: Update, context: CallbackContext):
    stats = load_stats()
    if not stats:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞")
        return
    
    stats_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:\n\n"
    for entry_id, entry in stats.items():
        stats_text += (
            f"üìÖ {entry['date']}\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {entry['state']} (—É—Ä–æ–≤–µ–Ω—å {entry['level']})\n"
            f"‚Ä¢ –ü–æ–º–æ–≥–ª–æ: {entry.get('helped', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –†–∏—Å–∫: {entry['risk']}\n\n"
        )
    
    await update.message.reply_text(stats_text)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
        reply_markup=main_kb()
    )
    return SELECT_STATE

async def handle_state(update: Update, context: CallbackContext):
    text = update.message.text
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_stats(update, context)
        
    if text not in ADVICES:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ –ê–ø–∞—Ç–∏—è –∏–ª–∏ –ú–∞–Ω–∏—è")
        return SELECT_STATE
    
    context.user_data['state'] = text
    await update.message.reply_text(
        f"üî¢ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å (1-5):",
        reply_markup=level_kb()
    )
    return SELECT_LEVEL

async def handle_level(update: Update, context: CallbackContext):
    level = update.message.text
    state = context.user_data.get('state')
    
    if not state or state not in ADVICES:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –ù–∞—á–Ω–∏ —Å /start")
        return ConversationHandler.END
    
    if level not in ADVICES[state]:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ—Ç 1 –¥–æ 5")
        return SELECT_LEVEL
    
    advice = ADVICES[state][level]
    context.user_data['current_advice'] = {
        "advice": advice,
        "state": state,
        "level": level,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M")
    }
    
    text = (
        f"üìå {advice['description']}\n\n"
        f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏: {advice['risk']}\n\n"
        "üí° –°–æ–≤–µ—Ç—ã:\n" + "\n".join(f"‚Ä¢ {a}" for a in advice['advices'])
    )
    
    await update.message.reply_text(text)
    await update.message.reply_text(
        "–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–º–æ–≥–ª–æ?",
        reply_markup=feedback_kb(advice['advices'])
    )
    return FEEDBACK

async def handle_feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    current_data = context.user_data.get('current_advice', {})
    advice = current_data.get("advice", {})
    choice = query.data
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = load_stats()
    entry_id = f"{current_data['state']}_{current_data['level']}_{datetime.now().timestamp()}"
    
    if choice == "help_none":
        stats[entry_id] = {
            "date": current_data["date"],
            "state": current_data["state"],
            "level": current_data["level"],
            "risk": advice["risk"],
            "helped": "–Ω–∏—á–µ–≥–æ"
        }
        await query.edit_message_text("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
    else:
        try:
            idx = int(choice.split("_")[1])
            helped_advice = advice['advices'][idx]
            stats[entry_id] = {
                "date": current_data["date"],
                "state": current_data["state"],
                "level": current_data["level"],
                "risk": advice["risk"],
                "helped": helped_advice
            }
            await query.edit_message_text(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: '{helped_advice}' –ø–æ–º–æ–≥.")
        except:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞")
    
    save_stats(stats)
    
    await query.message.reply_text(
        "üîÑ –•–æ—á–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–æ–≤–∞?",
        reply_markup=main_kb()
    )
    return SELECT_STATE

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not TOKEN or TOKEN == "7587845741:AAE54-7FfJTcECoPwfVg-rEHttFrkK9IkSM":
        print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_STATE: [
                MessageHandler(filters.TEXT & filters.Regex("^(–ê–ø–∞—Ç–∏—è|–ú–∞–Ω–∏—è)$"), handle_state),
                MessageHandler(filters.TEXT & filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats)
            ],
            SELECT_LEVEL: [MessageHandler(filters.TEXT & filters.Regex("^[1-5]$"), handle_level)],
            FEEDBACK: [CallbackQueryHandler(handle_feedback)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    import json  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
    main()
