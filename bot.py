import os
import logging
import json
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


SELECT_STATE, SELECT_LEVEL, FEEDBACK = range(3)


TOKEN = os.environ.get('TOKEN')
if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Railway")


if ':' not in TOKEN:
    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: {TOKEN[:5]}...")
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123456789:ABCdefGHIJK...'")

logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω (–ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤): {TOKEN[:5]}...")


ADVICES = {
    "–ê–ø–∞—Ç–∏—è": {
        "1": {
            "description": "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ü–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ –ª–µ–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.",
            "advices": ["–ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞", "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –±–æ–¥—Ä–æ–π –º—É–∑—ã–∫–∏", "–õ–µ–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞"],
            "risk": "–†–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª–µ–Ω. –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–∏–∑–∫–æ –∫ –±–∞–ª–∞–Ω—Å—É."
        },
        "2": {
            "description": "–í—ã–ø–µ–π –≤–æ–¥—ã. –ü–æ—Å–ª—É—à–∞–π –º—É–∑—ã–∫—É. –í–∫–ª—é—á–∏ —Å–º–µ—à–Ω–æ–µ –≤–∏–¥–µ–æ. –ï—Å—Ç—å —Ä–∏—Å–∫ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –≥–ª—É–±–∂–µ –≤ –º—ã—Å–ª–∏.",
            "advices": ["–í—ã–ø–∏—Ç—å –≤–æ–¥—ã", "–ü–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–º–µ—à–Ω–æ–µ –≤–∏–¥–µ–æ", "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É"],
            "risk": "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Ç–µ—Ä—è —ç–Ω–µ—Ä–≥–∏–∏. –í–∞–∂–Ω–æ –º—è–≥–∫–æ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ."
        },
        "3": {
            "description": "–í—ã–ø–µ–π –∫–æ—Ñ–µ –∏–ª–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫. –ü—Ä–∏–º–∏ –≥–æ—Ä—è—á–∏–π –¥—É—à. –°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ —Ä—É–∫–∞–º–∏ (—É–±–æ—Ä–∫–∞).",
            "advices": ["–í—ã–ø–∏—Ç—å –∫–æ—Ñ–µ/—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "–ü—Ä–∏–Ω—è—Ç—å –≥–æ—Ä—è—á–∏–π –¥—É—à", "–ó–∞–Ω—è—Ç—å—Å—è —É–±–æ—Ä–∫–æ–π", "–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–∞ –±—É–º–∞–≥—É"],
            "risk": "–°—Ä–µ–¥–Ω—è—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –¢–µ–ª–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è–º."
        },
        "4": {
            "description": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å –∫–µ–º-—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. –í—ã–π–¥–∏ –Ω–∞ —É–ª–∏—Ü—É –∏ —É–π–¥–∏ –¥–∞–ª–µ–∫–æ –æ—Ç –¥–æ–º–∞.",
            "advices": ["–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–µ–º-—Ç–æ", "–ü—Ä–æ–π—Ç–∏—Å—å –Ω–∞ —É–ª–∏—Ü–µ", "–ö—Ä–∏–∫–Ω—É—Ç—å –≤ –ø–æ–¥—É—à–∫—É", "–ü—Ä–∏–Ω—è—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à"],
            "risk": "–í—ã—Å–æ–∫–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –í–æ–∑–º–æ–∂–Ω—ã —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏."
        },
        "5": {
            "description": "–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤—ã–ø–ª–∞–∫–∞—Ç—å—Å—è –∏ –≤—ã–ø–ª–µ—Å–Ω—É—Ç—å —ç–º–æ—Ü–∏–∏. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ, –Ω–æ –≤ —ç—Ç–æ–º –∏ –≤—ã—Ö–æ–¥.",
            "advices": ["–í—ã–ø–ª–∞–∫–∞—Ç—å—Å—è", "–í—ã–ø–ª–µ—Å–Ω—É—Ç—å –∑–ª–æ—Å—Ç—å (–ø–æ–¥—É—à–∫–∞, –±—É–º–∞–≥–∞)", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É", "–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã"],
            "risk": "–ö—Ä–∏–∑–∏—Å. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω—è—è –ø–æ–º–æ—â—å."
        }
    },
    "–ú–∞–Ω–∏—è": {
        "1": {
            "description": "–õ–µ–≥–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã.",
            "advices": ["–ù–∞–ø—Ä–∞–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ –≤–∞–∂–Ω–æ–µ –¥–µ–ª–æ", "–ó–∞–ø–∏—Å–∞—Ç—å –∏–¥–µ–∏", "–°–¥–µ–ª–∞—Ç—å —Ä–∞–∑–º–∏–Ω–∫—É"],
            "risk": "–†–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª–µ–Ω. –≠–Ω–µ—Ä–≥–∏—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."
        },
        "2": {
            "description": "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ –æ–¥–Ω–æ–º –¥–µ–ª–µ, –∏–∑–±–µ–≥–∞–π –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏.",
            "advices": ["–°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–æ–º –¥–µ–ª–µ", "–í—ã–ø–∏—Ç—å –≤–æ–¥—ã", "–°—ä–µ—Å—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ"],
            "risk": "–õ—ë–≥–∫–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –í–æ–∑–º–æ–∂–Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å."
        },
        "3": {
            "description": "–í—ã–ø–µ–π –≤–æ–¥—ã. –ü–æ–µ—à—å –≤–∫—É—Å–Ω—è—à–µ–∫. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–ª—è–≥ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π.",
            "advices": ["–í—ã–ø–∏—Ç—å –≤–æ–¥—ã", "–°—ä–µ—Å—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ", "–ü—Ä–∏–ª–µ—á—å –Ω–∞ 10 –º–∏–Ω—É—Ç", "–í–∫–ª—é—á–∏—Ç—å –±–µ–ª—ã–π —à—É–º"],
            "risk": "–°—Ä–µ–¥–Ω—è—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –ú–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è —Ç—Ä–µ–º–æ—Ä."
        },
        "4": {
            "description": "–í—Ä–µ–º—è –ª–µ—á—å –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, —Å–æ–≤—Å–µ–º. –í–∫–ª—é—á–∏ —Ç—É–ø–æ–π –≤–∏–¥–æ—Å.",
            "advices": ["–õ–µ—á—å –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Å—Ç–æ–π –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫", "–î—ã—Ö–∞–Ω–∏–µ 4-7-8", "–û—Ö–ª–∞–¥–∏—Ç—å –ª–∏—Ü–æ"],
            "risk": "–í—ã—Å–æ–∫–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞. –†–∏—Å–∫ –∏—Ä—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
        },
        "5": {
            "description": "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å.",
            "advices": ["–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "–ü—Ä–∏–Ω—è—Ç—å —É—Å–ø–æ–∫–æ–∏—Ç–µ–ª—å–Ω–æ–µ", "–í—ã–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞/—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", "–í—ã–ø–∏—Ç—å –≥–æ—Ä—è—á–∏–π —Å–ª–∞–¥–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫"],
            "risk": "–ö—Ä–∏–∑–∏—Å. –í–æ–∑–º–æ–∂–Ω—ã –∏—Å—Ç–µ—Ä–∏–∫–∞, –∞–≥—Ä–µ—Å—Å–∏—è –∏–ª–∏ —Å—Ç—É–ø–æ—Ä."
        }
    }
}


STATS_FILE = "/data/stats.json"
ADVICE_STATS_FILE = "/data/advice_stats.json"

def ensure_data_dir():
    """–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç"""
    os.makedirs(os.path.dirname(STATS_FILE), exist_ok=True)

def load_stats():
    ensure_data_dir()
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

def save_stats(stats):
    try:
        ensure_data_dir()
        with open(STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def load_advice_stats():
    ensure_data_dir()
    try:
        if os.path.exists(ADVICE_STATS_FILE):
            with open(ADVICE_STATS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        
    
        stats = {}
        for state, levels in ADVICES.items():
            stats[state] = {}
            for level, data in levels.items():
                stats[state][level] = {advice: 100 for advice in data["advices"]}
        return stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–µ—Ç–æ–≤: {e}")
        return {}

def save_advice_stats(stats):
    try:
        ensure_data_dir()
        with open(ADVICE_STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–µ—Ç–æ–≤: {e}")
        return False

def update_advice_stats(state, level, selected_index=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–≤–µ—Ç–æ–≤"""
    stats = load_advice_stats()
    
    try:
        if state not in stats:
            stats[state] = {}
        if level not in stats[state]:
            stats[state][level] = {a: 100 for a in ADVICES[state][level]["advices"]}
        
        current_stats = stats[state][level]
        
        if selected_index is not None: 
            selected_advice = ADVICES[state][level]["advices"][selected_index]
                     
            current_stats[selected_advice] = min(100, current_stats.get(selected_advice, 100) + 10)
            
            for advice in current_stats:
                if advice != selected_advice:
                    current_stats[advice] = max(0, current_stats.get(advice, 100) - 10)
        else:
            
            for advice in current_stats:
                current_stats[advice] = max(0, current_stats.get(advice, 100) - 10)
        
        stats[state][level] = current_stats
        save_advice_stats(stats)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–µ—Ç–æ–≤: {e}")
        return False


def main_kb():
    return ReplyKeyboardMarkup([
        ["–ê–ø–∞—Ç–∏—è", "–ú–∞–Ω–∏—è"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
    ], resize_keyboard=True)

def level_kb():
    return ReplyKeyboardMarkup([[str(i) for i in range(1, 6)]], resize_keyboard=True)

def feedback_kb(state, level):
    advice_stats = load_advice_stats()
    advices = ADVICES[state][level]["advices"]
    
    buttons = []
    for i, advice in enumerate(advices):
        effectiveness = advice_stats.get(state, {}).get(level, {}).get(advice, 100)
        text = f"{advice} ({effectiveness}%)"
        buttons.append([InlineKeyboardButton(text, callback_data=f"help_{i}")])
    
    buttons.append([InlineKeyboardButton("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ", callback_data="help_none")])
    return InlineKeyboardMarkup(buttons)


async def start(update: Update, context: CallbackContext):
    try:
        await update.message.reply_text(
            "üìä –í—ã–±–µ—Ä–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
            reply_markup=main_kb()
        )
        return SELECT_STATE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        raise

async def show_stats(update: Update, context: CallbackContext):
    try:
        stats = load_stats()
        advice_stats = load_advice_stats()
        
        if not stats:
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞")
            return SELECT_STATE
        
        stats_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:\n\n"
        for entry_id, entry in stats.items():
            stats_text += (
                f"üìÖ {entry['date']}\n"
                f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {entry['state']} (—É—Ä–æ–≤–µ–Ω—å {entry['level']})\n"
                f"‚Ä¢ –ü–æ–º–æ–≥–ª–æ: {entry.get('helped', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚Ä¢ –†–∏—Å–∫: {entry['risk']}\n\n"
            )
        
        await update.message.reply_text(stats_text)
      
        advice_text = "üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–≤–µ—Ç–æ–≤:\n\n"
        for state, levels in advice_stats.items():
            advice_text += f"üîπ {state}:\n"
            for level, advices in levels.items():
                advice_text += f"  –£—Ä–æ–≤–µ–Ω—å {level}:\n"
                for advice, eff in advices.items():
                    advice_text += f"    ‚Ä¢ {advice}: {eff}%\n"
            advice_text += "\n"
        
        await update.message.reply_text(advice_text)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
            reply_markup=main_kb()
        )
        return SELECT_STATE
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")
        return SELECT_STATE

async def handle_state(update: Update, context: CallbackContext):
    try:
        text = update.message.text
        
        if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            return await show_stats(update, context)
            
        if text not in ADVICES:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ –ê–ø–∞—Ç–∏—è –∏–ª–∏ –ú–∞–Ω–∏—è")
            return SELECT_STATE
        
        context.user_data['state'] = text
        await update.message.reply_text(
            f"üî¢ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å (1-5):",
            reply_markup=level_kb()
        )
        return SELECT_LEVEL
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_state: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return SELECT_STATE

async def handle_level(update: Update, context: CallbackContext):
    try:
        level = update.message.text
        state = context.user_data.get('state')
        
        if not state or state not in ADVICES:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –ù–∞—á–Ω–∏ —Å /start")
            return ConversationHandler.END
        
        if level not in ADVICES[state]:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ—Ç 1 –¥–æ 5")
            return SELECT_LEVEL
        
        advice = ADVICES[state][level]
        context.user_data['current_advice'] = {
            "advice": advice,
            "state": state,
            "level": level,
            "date": datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        

        advice_stats = load_advice_stats()
        current_stats = advice_stats.get(state, {}).get(level, {})
        
        advice_text = (
            f"üìå {advice['description']}\n\n"
            f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏: {advice['risk']}\n\n"
            "üí° –°–æ–≤–µ—Ç—ã (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å):\n"
        )
        
        for a in advice['advices']:
            eff = current_stats.get(a, 100)
            advice_text += f"‚Ä¢ {a} ({eff}%)\n"
        
        await update.message.reply_text(advice_text)
        await update.message.reply_text(
            "–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–º–æ–≥–ª–æ?",
            reply_markup=feedback_kb(state, level)
        )
        return FEEDBACK
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_level: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return SELECT_STATE

async def handle_feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    try:
        current_data = context.user_data.get('current_advice', {})
        advice = current_data.get("advice", {})
        choice = query.data
        
        stats = load_stats()
        entry_id = f"{current_data['state']}_{current_data['level']}_{datetime.now().timestamp()}"
        
        if choice == "help_none":
            stats[entry_id] = {
                "date": current_data["date"],
                "state": current_data["state"],
                "level": current_data["level"],
                "risk": advice["risk"],
                "helped": "–Ω–∏—á–µ–≥–æ"
            }
            
            update_advice_stats(current_data['state'], current_data['level'])
            
            await query.edit_message_text("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
        else:
            idx = int(choice.split("_")[1])
            helped_advice = advice['advices'][idx]
            stats[entry_id] = {
                "date": current_data["date"],
                "state": current_data["state"],
                "level": current_data["level"],
                "risk": advice["risk"],
                "helped": helped_advice
            }

            update_advice_stats(current_data['state'], current_data['level'], idx)
            
            await query.edit_message_text(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: '{helped_advice}' –ø–æ–º–æ–≥.")
        
        save_stats(stats)
        

        await query.message.reply_text(
            "üîÑ –•–æ—á–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–æ–≤–∞?",
            reply_markup=main_kb()
        )
        return SELECT_STATE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_feedback: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return SELECT_STATE

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    try:
        application = Application.builder().token(TOKEN).build()
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                SELECT_STATE: [
                    MessageHandler(filters.TEXT & filters.Regex("^(–ê–ø–∞—Ç–∏—è|–ú–∞–Ω–∏—è)$"), handle_state),
                    MessageHandler(filters.TEXT & filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats)
                ],
                SELECT_LEVEL: [MessageHandler(filters.TEXT & filters.Regex("^[1-5]$"), handle_level)],
                FEEDBACK: [CallbackQueryHandler(handle_feedback)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        application.add_handler(conv_handler)
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()
