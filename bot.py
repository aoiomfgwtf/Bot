import os
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_STATE, SELECT_LEVEL, FEEDBACK = range(3)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.getenv("TOKEN") or "7587845741:AAE54-7FfJTcECoPwfVg-rEHttFrkK9IkSM"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_kb():
    return ReplyKeyboardMarkup([["–ê–ø–∞—Ç–∏—è", "–ú–∞–Ω–∏—è"]], resize_keyboard=True)

def level_kb():
    return ReplyKeyboardMarkup([[str(i) for i in range(1, 6)]], resize_keyboard=True)

def feedback_kb(advices):
    buttons = [[InlineKeyboardButton(a, callback_data=f"help_{i}")] for i, a in enumerate(advices)]
    buttons.append([InlineKeyboardButton("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ", callback_data="help_none")])
    return InlineKeyboardMarkup(buttons)

# –°–æ–≤–µ—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ JSON)
ADVICES = {
    "–ê–ø–∞—Ç–∏—è": {
        "1": {
            "description": "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ü–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ –ª–µ–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.",
            "advices": ["–ü—Ä–æ–≥—É–ª–∫–∞", "–ú—É–∑—ã–∫–∞", "–í–æ–¥–∞"],
            "risk": "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        },
        "2": {
            "description": "–ï—Å—Ç—å —Ä–∏—Å–∫ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –≥–ª—É–±–∂–µ –≤ –º—ã—Å–ª–∏.",
            "advices": ["–ì–æ—Ä—è—á–∏–π –¥—É—à", "–ö–æ—Ñ–µ", "–ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É"],
            "risk": "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
        }
    },
    "–ú–∞–Ω–∏—è": {
        "1": {
            "description": "–õ–µ–≥–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã.",
            "advices": ["–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞", "–ó–∞–ø–∏—Å—å –∏–¥–µ–π", "–†–∞–∑–º–∏–Ω–∫–∞"],
            "risk": "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        },
        "2": {
            "description": "–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–∏–∑–∫–æ–µ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º—É.",
            "advices": ["–î—ã—Ö–∞–Ω–∏–µ 4-7-8", "–•–æ–ª–æ–¥ –Ω–∞ –ª–∏—Ü–æ", "–¢—É–ø–æ–µ –≤–∏–¥–µ–æ"],
            "risk": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        }
    }
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
        reply_markup=main_kb()
    )
    return SELECT_STATE

async def handle_state(update: Update, context: CallbackContext):
    state = update.message.text
    context.user_data['state'] = state
    await update.message.reply_text(
        f"üî¢ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å (1-5):",
        reply_markup=level_kb()
    )
    return SELECT_LEVEL

async def handle_level(update: Update, context: CallbackContext):
    level = update.message.text
    state = context.user_data['state']
    
    if state not in ADVICES or level not in ADVICES[state]:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        return ConversationHandler.END
    
    advice = ADVICES[state][level]
    context.user_data['current_advice'] = advice
    
    text = (
        f"üìå {advice['description']}\n\n"
        f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏: {advice['risk']}\n\n"
        "üí° –°–æ–≤–µ—Ç—ã:\n" + "\n".join(f"‚Ä¢ {a}" for a in advice['advices'])
    )
    
    await update.message.reply_text(text)
    await update.message.reply_text(
        "–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–º–æ–≥–ª–æ?",
        reply_markup=feedback_kb(advice['advices'])
    )
    return FEEDBACK

async def handle_feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    advice = context.user_data['current_advice']
    
    if choice == "help_none":
        await query.edit_message_text("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
    else:
        idx = int(choice.split("_")[1])
        helped_advice = advice['advices'][idx]
        await query.edit_message_text(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: '{helped_advice}' –ø–æ–º–æ–≥.")
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É
    await query.message.reply_text(
        "üîÑ –•–æ—á–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–æ–≤–∞?",
        reply_markup=main_kb()
    )
    return SELECT_STATE

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_STATE: [MessageHandler(filters.TEXT & filters.Regex("^(–ê–ø–∞—Ç–∏—è|–ú–∞–Ω–∏—è)$"), handle_state)],
            SELECT_LEVEL: [MessageHandler(filters.TEXT & filters.Regex("^[1-5]$"), handle_level)],
            FEEDBACK: [CallbackQueryHandler(handle_feedback)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
