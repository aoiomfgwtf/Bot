import logging
import json
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7587845741:AAE54-7FfJTcECoPwfVg-rEHttFrkK9IkSM"
DATA_FILE = "user_data.csv"
ADVICES_FILE = "advices.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ JSON
with open(ADVICES_FILE, "r", encoding="utf-8") as f:
    ADVICES_DATA = json.load(f)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_LEVEL, SELECTING_ADVICE, CONFIRMING = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup([["–ê–ø–∞—Ç–∏—è", "–ú–∞–Ω–∏—è"]], resize_keyboard=True)

def get_level_keyboard():
    return ReplyKeyboardMarkup([[str(i) for i in range(1,6)]], resize_keyboard=True)

def get_advices_keyboard(advices):
    buttons = []
    for advice in advices:
        buttons.append([InlineKeyboardButton(advice, callback_data=f"advice_{advices.index(advice)}")])
    buttons.append([InlineKeyboardButton("–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ", callback_data="advice_none")])
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n"
        "–í—ã–±–µ—Ä–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return SELECTING_LEVEL

async def handle_state(update: Update, context: CallbackContext):
    state = update.message.text
    context.user_data['current_state'] = state
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {state}. –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å? (1-5):",
        reply_markup=get_level_keyboard()
    )
    return SELECTING_ADVICE

async def handle_level(update: Update, context: CallbackContext):
    level = int(update.message.text)
    state = context.user_data.get('current_state', 'unknown')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data['current_level'] = level
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    state_data = ADVICES_DATA["states"][state][str(level)]
    message = (
        f"üìå {state_data['description']}\n\n"
        f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏: {state_data['risk']}\n\n"
        f"–°–æ–≤–µ—Ç—ã:\n" + "\n".join(f"‚Ä¢ {advice}" for advice in state_data['advices'])
    )
    
    await update.message.reply_text(
        message,
        reply_markup=get_advices_keyboard(state_data['advices'])
    )
    return CONFIRMING

async def handle_advice_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    selected_advice = query.data
    if selected_advice == "advice_none":
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
    else:
        advice_index = int(selected_advice.split("_")[1])
        state = context.user_data['current_state']
        level = context.user_data['current_level']
        selected_advice_text = ADVICES_DATA["states"][state][str(level)]['advices'][advice_index]
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await query.edit_message_text(
            f"‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ: {selected_advice_text}\n"
            "–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
        )
    
    await query.message.reply_text(
        "–ù–∞–∂–º–∏ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
    )
    return ConversationHandler.END

def main():
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_LEVEL: [
                MessageHandler(filters.TEXT & filters.Regex("^(–ê–ø–∞—Ç–∏—è|–ú–∞–Ω–∏—è)$"), handle_state)
            ],
            SELECTING_ADVICE: [
                MessageHandler(filters.TEXT & filters.Regex("^[1-5]$"), handle_level)
            ],
            CONFIRMING: [
                CallbackQueryHandler(handle_advice_selection)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
