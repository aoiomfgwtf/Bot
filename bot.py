import os
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_STATE, SELECT_LEVEL, FEEDBACK = range(3)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô!)
TOKEN = os.getenv("TOKEN") or "–í–ê–®_–¢–û–ö–ï–ù_–¢–£–¢"

# –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π
ADVICES = {
    "–ê–ø–∞—Ç–∏—è": {
        "1": {
            "description": "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ü–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ –ª–µ–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.",
            "advices": ["–ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞", "–ë–æ–¥—Ä–∞—è –º—É–∑—ã–∫–∞", "–°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã"],
            "risk": "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        },
        "2": {
            "description": "–õ–µ–≥–∫–∞—è –∞–ø–∞—Ç–∏—è. –ù–µ –¥–∞–π —Å–µ–±–µ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≥–ª—É–±–∂–µ.",
            "advices": ["–ì–æ—Ä—è—á–∏–π –¥—É—à", "–ö–æ—Ñ–µ", "–ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É"],
            "risk": "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫"
        },
        "3": {
            "description": "–°—Ä–µ–¥–Ω—è—è –∞–ø–∞—Ç–∏—è. –ù—É–∂–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            "advices": ["–£–±–æ—Ä–∫–∞", "–°–ø–æ—Ä—Ç", "–†–∏—Å–æ–≤–∞–Ω–∏–µ"],
            "risk": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        },
        "4": {
            "description": "–°–∏–ª—å–Ω–∞—è –∞–ø–∞—Ç–∏—è. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
            "advices": ["–†–∞–∑–≥–æ–≤–æ—Ä —Å –±–ª–∏–∑–∫–∏–º", "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ", "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à"],
            "risk": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        },
        "5": {
            "description": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∞–ø–∞—Ç–∏—è. –°—Ä–æ—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–π –º–µ—Ä—ã.",
            "advices": ["–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–í—ã–ø–ª–µ—Å–∫ —ç–º–æ—Ü–∏–π"],
            "risk": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
        }
    },
    "–ú–∞–Ω–∏—è": {
        "1": {
            "description": "–õ–µ–≥–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É.",
            "advices": ["–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞—á–µ", "–ó–∞–ø–∏—Å—å –∏–¥–µ–π", "–†–∞–∑–º–∏–Ω–∫–∞"],
            "risk": "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        },
        "2": {
            "description": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–∞–Ω–∏—è. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π —ç–Ω–µ—Ä–≥–∏—é.",
            "advices": ["–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "–ß–∞–π –≤–º–µ—Å—Ç–æ –∫–æ—Ñ–µ", "–¢–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç—ã"],
            "risk": "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫"
        },
        "3": {
            "description": "–°–∏–ª—å–Ω–∞—è –º–∞–Ω–∏—è. –ü–æ—Ä–∞ —É—Å–ø–æ–∫–∞–∏–≤–∞—Ç—å—Å—è.",
            "advices": ["–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ –Ω–∞ –ª–∏—Ü–æ", "–¢–∏—Ö–∞—è –º—É–∑—ã–∫–∞", "–ó–∞–∑–µ–º–ª–µ–Ω–∏–µ"],
            "risk": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        },
        "4": {
            "description": "–û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –º–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∏—Å—å!",
            "advices": ["–¢–µ–º–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞", "–î—ã—Ö–∞–Ω–∏–µ 4-7-8", "–û—Ç–¥—ã—Ö –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤"],
            "risk": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        },
        "5": {
            "description": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–∞–Ω–∏—è. –°—Ä–æ—á–Ω–æ —É—Å–ø–æ–∫–∞–∏–≤–∞–π—Å—è!",
            "advices": ["–õ–µ—á—å –≤ –ø–æ—Å—Ç–µ–ª—å", "–ü—Ä–∏–Ω—è—Ç—å —É—Å–ø–æ–∫–æ–∏—Ç–µ–ª—å–Ω–æ–µ", "–ü–æ–∑–≤–∞—Ç—å –Ω–∞ –ø–æ–º–æ—â—å"],
            "risk": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
        }
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_kb():
    return ReplyKeyboardMarkup([["–ê–ø–∞—Ç–∏—è", "–ú–∞–Ω–∏—è"]], resize_keyboard=True)

def level_kb():
    return ReplyKeyboardMarkup([[str(i) for i in range(1, 6)]], resize_keyboard=True)

def feedback_kb(advices):
    buttons = [[InlineKeyboardButton(a, callback_data=f"help_{i}")] for i, a in enumerate(advices)]
    buttons.append([InlineKeyboardButton("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ", callback_data="help_none")])
    return InlineKeyboardMarkup(buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
        reply_markup=main_kb()
    )
    return SELECT_STATE

async def handle_state(update: Update, context: CallbackContext):
    state = update.message.text
    if state not in ADVICES:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ –ê–ø–∞—Ç–∏—è –∏–ª–∏ –ú–∞–Ω–∏—è")
        return SELECT_STATE
    
    context.user_data['state'] = state
    await update.message.reply_text(
        f"üî¢ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å (1-5):",
        reply_markup=level_kb()
    )
    return SELECT_LEVEL

async def handle_level(update: Update, context: CallbackContext):
    level = update.message.text
    state = context.user_data.get('state')
    
    if not state or state not in ADVICES:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –ù–∞—á–Ω–∏ —Å /start")
        return ConversationHandler.END
    
    if level not in ADVICES[state]:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ—Ç 1 –¥–æ 5")
        return SELECT_LEVEL
    
    advice = ADVICES[state][level]
    context.user_data['current_advice'] = advice
    
    text = (
        f"üìå {advice['description']}\n\n"
        f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏: {advice['risk']}\n\n"
        "üí° –°–æ–≤–µ—Ç—ã:\n" + "\n".join(f"‚Ä¢ {a}" for a in advice['advices'])
    )
    
    await update.message.reply_text(text)
    await update.message.reply_text(
        "–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–º–æ–≥–ª–æ?",
        reply_markup=feedback_kb(advice['advices'])
    )
    return FEEDBACK

async def handle_feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    advice = context.user_data.get('current_advice', {})
    
    if choice == "help_none":
        await query.edit_message_text("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
    else:
        try:
            idx = int(choice.split("_")[1])
            helped_advice = advice.get('advices', [])[idx]
            await query.edit_message_text(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: '{helped_advice}' –ø–æ–º–æ–≥.")
        except:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞")
    
    await query.message.reply_text(
        "üîÑ –•–æ—á–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–æ–≤–∞?",
        reply_markup=main_kb()
    )
    return SELECT_STATE

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not TOKEN or TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–¢–£–¢":
        print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_STATE: [MessageHandler(filters.TEXT & filters.Regex("^(–ê–ø–∞—Ç–∏—è|–ú–∞–Ω–∏—è)$"), handle_state)],
            SELECT_LEVEL: [MessageHandler(filters.TEXT & filters.Regex("^[1-5]$"), handle_level)],
            FEEDBACK: [CallbackQueryHandler(handle_feedback)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
