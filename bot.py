import os
import json
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("7587845741:AAE54-7FfJTcECoPwfVg-rEHttFrkK9IkSM")
ADVICES_FILE = "advices.json"
STATS_FILE = "stats.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with open(ADVICES_FILE, "r", encoding="utf-8") as f:
    ADVICES = json.load(f)

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(STATS_FILE):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_STATE, SELECT_LEVEL, FEEDBACK = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_kb():
    return ReplyKeyboardMarkup([["–ê–ø–∞—Ç–∏—è", "–ú–∞–Ω–∏—è"]], resize_keyboard=True)

def level_kb():
    return ReplyKeyboardMarkup([[str(i) for i in range(1, 6)]], resize_keyboard=True)

def feedback_kb(advices):
    buttons = [[InlineKeyboardButton(a, callback_data=f"help_{i}")] for i, a in enumerate(advices)]
    buttons.append([InlineKeyboardButton("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ", callback_data="help_none")])
    return InlineKeyboardMarkup(buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
        reply_markup=main_kb()
    )
    return SELECT_STATE

async def handle_state(update: Update, context: CallbackContext):
    state = update.message.text
    context.user_data['state'] = state
    await update.message.reply_text(
        f"üî¢ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å (1-5):",
        reply_markup=level_kb()
    )
    return SELECT_LEVEL

async def handle_level(update: Update, context: CallbackContext):
    level = update.message.text
    state = context.user_data['state']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ñ–∏–¥–±–µ–∫–∞
    context.user_data['current_advice'] = ADVICES["states"][state][level]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    advice = context.user_data['current_advice']
    text = (
        f"üìå {advice['description']}\n\n"
        f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏: {advice['risk']}\n\n"
        "üí° –°–æ–≤–µ—Ç—ã:\n" + "\n".join(f"‚Ä¢ {a}" for a in advice['advices'])
    )
    
    await update.message.reply_text(text)
    await update.message.reply_text(
        "–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–º–æ–≥–ª–æ?",
        reply_markup=feedback_kb(advice['advices'])
    )
    return FEEDBACK

async def handle_feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    advice = context.user_data['current_advice']
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        stats = json.load(f)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    state = context.user_data['state']
    level = list(ADVICES["states"][state].keys())[list(ADVICES["states"][state].values()).index(advice)]
    
    if choice == "help_none":
        await query.edit_message_text("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
    else:
        idx = int(choice.split("_")[1])
        helped_advice = advice['advices'][idx]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        key = f"{state}_{level}"
        if key not in stats:
            stats[key] = {a: 0 for a in advice['advices']}
        stats[key][helped_advice] += 1
        
        await query.edit_message_text(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: '{helped_advice}' –ø–æ–º–æ–≥.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—É
    await query.message.reply_text(
        "üîÑ –•–æ—á–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–æ–≤–∞?",
        reply_markup=main_kb()
    )
    return SELECT_STATE

def main():
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_STATE: [MessageHandler(filters.TEXT & filters.Regex("^(–ê–ø–∞—Ç–∏—è|–ú–∞–Ω–∏—è)$"), handle_state)],
            SELECT_LEVEL: [MessageHandler(filters.TEXT & filters.Regex("^[1-5]$"), handle_level)],
            FEEDBACK: [CallbackQueryHandler(handle_feedback)]
        },
        fallbacks=[CommandHandler('cancel', lambda u,c: ConversationHandler.END)]
    )
    
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
